// Layout Grid with columns

$layout-grid-columns: 12;
$layout-grid-gutter: 1rem;
$layout-grid-gap: 1rem;
$layout-grid-gap-small: .4rem; // alternative small gap

// map for media breakpoints, 'small' is mandatory and reserved as mobile first
$layout-grid-media: (
    xsmall: 0,
    // 0px, mobile first
    small: 40em,
    // 640px
    medium: 60em,
    // 960px
    large: 64em,
    // 1024px
    xlarge: 75em,
    // 1200px
    xxlarge: 90em // 1440px
);

@mixin grid {
    display: flex;
    align-items: stretch;
    justify-content: flex-start;
    padding: 0 $layout-grid-gutter;
    flex-wrap: wrap;
}

@mixin layout-grid-columns {
    @for $i from 1 through $layout-grid-columns {
        &--col-#{$i} {
            $col-width: ($i / $layout-grid-columns) * 100%;
            flex: 0 0 $col-width;
            max-width: $col-width;
        }
    }
}

@mixin layout-grid-responsive {
    @for $i from 1 through $layout-grid-columns {
        &-#{$i} {
            $col-width: ($i / $layout-grid-columns) * 100%;
            flex: 0 0 $col-width;
            min-width: $col-width;
        }
    }
}

@mixin layout-grid-responsive-boxed {
    @for $i from 1 through $layout-grid-columns {
        &-#{$i} {
            $box-col-width: calc(#{($i / $layout-grid-columns) * 100%} - #{$layout-grid-gap * 2});
            flex: 0 0 $box-col-width;
            min-width: $box-col-width;
        }
    }
}

@mixin layout-grid-responsive-boxed-small {
    @for $i from 1 through $layout-grid-columns {
        &-#{$i} {
            $box-col-width: calc(#{($i / $layout-grid-columns) * 100%} - #{$layout-grid-gap-small * 2});
            flex: 0 0 $box-col-width;
            min-width: $box-col-width;
        }
    }
}

.grid {
    @include grid;

    .grid__item {
        flex: 1 1 auto;
        padding: 0 $layout-grid-gutter;

        &.grid__item {
            @include layout-grid-columns;
        }

        &>.grid {
            margin-inline-start: -$layout-grid-gutter;
            margin-inline-end: -$layout-grid-gutter;
            padding: 0;
        }
    }

    &+.grid {
        margin-block-start: 1rem;
    }
}

.grid--padding-fix {
    margin-inline-start: -$layout-grid-gutter;
    margin-inline-end: -$layout-grid-gutter;
    padding: 0;
}

.grid--margin {
    margin-block-start: $layout-grid-gutter;
    margin-block-end: $layout-grid-gutter;
}

.grid--wrap {
    flex-wrap: wrap;
}

.grid--boxed {
    margin-inline-start: -$layout-grid-gap;
    margin-inline-end: -$layout-grid-gap;

    .grid__item {
        margin: $layout-grid-gap;
        padding: 0;
    }
}

.grid--boxed-styled {
    .grid__item {
        background-color: white;
        border-radius: $border-radius__base--x-small;
        box-shadow: 0 1px 4px rgba(0, 0, 0, .12);
    }
}

.grid--boxed-small {
    margin-inline-start: -$layout-grid-gap-small;
    margin-inline-end: -$layout-grid-gap-small;

    .grid__item {
        margin: $layout-grid-gap-small;
        padding: 0;
    }
}

.grid--boxed-small-styled {
    .grid__item {
        background-color: white;
        border-radius: $border-radius__base--x-small;
        box-shadow: 0 1px 4px rgba(0, 0, 0, .12);
    }
}

// Media queries
@each $name,
$value in $layout-grid-media {
    @media only screen and (min-width: $value) {
        .grid {
            .grid__item {
                &.gi-#{$name} {
                    @include layout-grid-responsive;
                }
            }
        }

        .grid--boxed {
            .grid__item {
                &.gi-#{$name} {
                    @include layout-grid-responsive-boxed;
                }
            }
        }

        .grid--boxed-small {
            .grid__item {
                &.gi-#{$name} {
                    @include layout-grid-responsive-boxed-small;
                }
            }
        }
    }
}
